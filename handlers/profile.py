from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from states import ProfileFSM, ProfileFullFSM, OnboardFSM
from db import get_connection
from keyboards import profile_inline_kb
from utils.formatting import format_profile_card
from utils.parsing import parse_profile_update

# –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏–∑ –º–æ–¥—É–ª—è prompt.py
try:
    from prompt import PROMPT, PROMPT_YOGA
except Exception:
    PROMPT = ""
    PROMPT_YOGA = ""

router = Router()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –≤—ã–±–æ—Ä –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –ø–æ —Ä–µ–∂–∏–º—É
_YOGA_ALIASES = {"–π–æ–≥–∞", "–ø–∏–ª–∞—Ç–µ—Å", "–π–æ–≥–∞/–ø–∏–ª–∞—Ç–µ—Å", "yoga", "pilates", "yoga/pilates"}

def _default_prompt_for_mode(mode_value: str | None) -> str:
    mode = (mode_value or "").strip().lower()
    return PROMPT_YOGA if mode in _YOGA_ALIASES else PROMPT

@router.message(F.text == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def view_profile(message: Message):
    tg_id = message.from_user.id
    conn = get_connection()
    row = conn.execute(
        "SELECT name, age, height, weight, goal, experience, gender FROM users WHERE tg_id = ?",
        (tg_id,)
    ).fetchone()
    conn.close()
    await message.answer(format_profile_card(row), parse_mode="HTML", reply_markup=profile_inline_kb())

# --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (prompt) ------------------------
@router.message(F.text.casefold() == "–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é")
async def edit_prompt_from_reply(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    conn = get_connection()
    row = conn.execute(
        "SELECT prompt, training_type FROM users WHERE tg_id = ?",
        (tg_id,)
    ).fetchone()
    conn.close()

    user_prompt = (row["prompt"] if row and row["prompt"] else None)
    mode_value = None
    if row:
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ training_type
        mode_value = row["training_type"] if "training_type" in row.keys() else None

    current_prompt = user_prompt if user_prompt is not None else _default_prompt_for_mode(mode_value)

    await message.answer("–í–æ—Ç –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    await message.answer(current_prompt if current_prompt else "‚Äî –ø—É—Å—Ç–æ ‚Äî")
    await state.set_state(ProfileFSM.edit_prompt)
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ /default ‚Äî —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")

@router.callback_query(F.data == "profile:edit_prompt")
async def edit_prompt_from_inline(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    tg_id = callback.from_user.id
    conn = get_connection()
    row = conn.execute(
        "SELECT prompt, training_type FROM users WHERE tg_id = ?",
        (tg_id,)
    ).fetchone()
    conn.close()

    user_prompt = (row["prompt"] if row and row["prompt"] else None)
    mode_value = None
    if row:
        mode_value = row["training_type"] if "training_type" in row.keys() else None

    current_prompt = user_prompt if user_prompt is not None else _default_prompt_for_mode(mode_value)

    await callback.message.answer("–í–æ—Ç –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    await callback.message.answer(current_prompt if current_prompt else "‚Äî –ø—É—Å—Ç–æ ‚Äî")
    await state.set_state(ProfileFSM.edit_prompt)
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–ª–∏ /default ‚Äî —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")

@router.message(ProfileFSM.edit_prompt)
async def edit_prompt_save(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    tg_id = message.from_user.id

    # –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if text.lower() == "/cancel":
        await state.clear()
        await message.answer("–û–∫, –æ—Å—Ç–∞–≤–∏–ª –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π. ‚úÖ")
        return

    # –°–±—Ä–æ—Å –Ω–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç (—Ö—Ä–∞–Ω–∏–º NULL)
    if text.lower() == "/default":
        conn = get_connection(); cur = conn.cursor()
        cur.execute("UPDATE users SET prompt = NULL WHERE tg_id = ?", (tg_id,))
        conn.commit(); conn.close()
        await state.clear()
        await message.answer("–°–±—Ä–æ—Å–∏–ª –Ω–∞ –¥–µ—Ñ–æ–ª—Ç")
        return

    if not text:
        await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –ª–∏–±–æ /cancel, –ª–∏–±–æ /default.")
        return

    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET prompt = ? WHERE tg_id = ?", (text, tg_id))
    conn.commit(); conn.close()

    await state.clear()
    await message.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")

@router.callback_query(F.data == "profile:edit")
async def edit_profile_cb(callback: CallbackQuery, state: FSMContext):
    await callback.answer("–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è", show_alert=False)
    await state.set_state(ProfileFSM.wait_input)
    await callback.message.answer(
        "–ù–∞–ø–∏—à–∏, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –ê–ª–µ—à–∞, –í–æ–∑—Ä–∞—Å—Ç 39, –†–æ—Å—Ç 173, –í–µ—Å 82, –¶–µ–ª—å —Å–∏–ª–∞, –û–ø—ã—Ç –Ω–æ–≤–∏—á–æ–∫, –ü–æ–ª –º—É–∂—Å–∫–æ–π.\n"
        "–ú–æ–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è.\n\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–ª–∏: —Å–∏–ª–∞, –º–∞—Å—Å–∞, —Å—É—à–∫–∞, –æ–±—â–∞—è —Ñ–æ—Ä–º–∞.\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—ã—Ç–∞: –Ω–æ–≤–∏—á–æ–∫, —Å—Ä–µ–¥–Ω–∏–π, –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π.\n"
        "–ü–æ–ª: –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π. –†–æ—Å—Ç –∏ –≤–µ—Å –≤–≤–æ–¥–∏ —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏."
    )

@router.callback_query(F.data == "profile:mode")
async def choose_mode(callback: CallbackQuery):
    # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–ª–∞–π–Ω-–≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí™ –°–∏–ª–æ–≤–∞—è", callback_data="set_mode:strength")],
        [InlineKeyboardButton(text="üßò –ô–æ–≥–∞/–ü–∏–ª–∞—Ç–µ—Å", callback_data="set_mode:yoga")],
    ])
    await callback.message.answer("–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º:", reply_markup=kb)
    await callback.answer()

@router.callback_query(F.data.startswith("set_mode:"))
async def set_mode(callback: CallbackQuery):
    data = (callback.data or "").split(":", 1)
    mode = data[1] if len(data) == 2 else "strength"
    human = "–°–∏–ª–æ–≤–∞—è" if mode == "strength" else "–ô–æ–≥–∞/–ü–∏–ª–∞—Ç–µ—Å"

    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET training_type = ? WHERE tg_id = ?", (mode, callback.from_user.id))
    conn.commit(); conn.close()

    await callback.message.answer(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {human} ‚úÖ")
    await callback.answer()

@router.message(ProfileFSM.wait_input)
async def profile_update_input(message: Message, state: FSMContext):
    data = parse_profile_update(message.text or "")
    if not data:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ò–º—è –ê–ª–µ—à–∞, –í–æ–∑—Ä–∞—Å—Ç 39, –†–æ—Å—Ç 173")
        return
    tg_id = message.from_user.id
    conn = get_connection(); cur = conn.cursor()
    set_clause = ", ".join(f"{k} = ?" for k in data.keys())
    values = list(data.values()) + [tg_id]
    cur.execute(f"UPDATE users SET {set_clause} WHERE tg_id = ?", values)
    conn.commit()
    row = cur.execute(
        "SELECT name, age, height, weight, goal, experience, gender FROM users WHERE tg_id = ?",
        (tg_id,)
    ).fetchone()
    conn.close()
    await state.clear()
    await message.answer(format_profile_card(row), parse_mode="HTML", reply_markup=profile_inline_kb())

@router.callback_query(F.data == "profile:refresh_form")
async def profile_refresh_form(callback: CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    conn = get_connection()
    ob = conn.execute(
        "SELECT bench_max_kg, squat_max_kg, pullups_reps, deadlift_max_kg, ohp_max_kg, dips_reps FROM users WHERE tg_id = ?",
        (tg_id,)
    ).fetchone()
    conn.close()
    prev = dict(ob) if ob else {}
    lines = [
        "–û–±–Ω–æ–≤–∏–º –∞–Ω–∫–µ—Ç—É. –ü—Ä–∏—à–ª–∏ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.\n",
        "–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:",
        f"–ñ–∏–º –ª—ë–∂–∞: {prev.get('bench_max_kg', '‚Äî')} –∫–≥",
        f"–ü—Ä–∏—Å–µ–¥ —Å–æ —à—Ç–∞–Ω–≥–æ–π: {prev.get('squat_max_kg', '‚Äî')} –∫–≥",
        f"–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è: {prev.get('pullups_reps', '‚Äî')} –ø–æ–≤—Ç.",
        f"–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞: {prev.get('deadlift_max_kg', '‚Äî')} –∫–≥",
        f"–ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º (—Å—Ç–æ—è): {prev.get('ohp_max_kg', '‚Äî')} –∫–≥",
        f"–ë—Ä—É—Å—å—è: {prev.get('dips_reps', '‚Äî')} –ø–æ–≤—Ç.",
    ]
    await state.set_state(OnboardFSM.bench)
    await callback.message.answer("\n".join(lines) + "\n\n–ñ–∏–º –ª—ë–∂–∞ ‚Äî —Ç–≤–æ–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (–∫–≥)? –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
    await callback.answer()

# –ü–æ–ª–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ strength)
def _is_int(s: str) -> bool:
    try:
        int(s); return True
    except Exception:
        return False

@router.message(ProfileFullFSM.name)
async def pf_name(message: Message, state: FSMContext):
    v = (message.text or "").strip()
    if not v:
        await message.answer("–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –∏–º—è –µ—â—ë —Ä–∞–∑.")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET name = ? WHERE tg_id = ?", (v, message.from_user.id))
    conn.commit(); conn.close()
    await state.set_state(ProfileFullFSM.age)
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –ª–µ—Ç):")

@router.message(ProfileFullFSM.age)
async def pf_age(message: Message, state: FSMContext):
    t = (message.text or "").strip()
    if not _is_int(t) or not (1 <= int(t) <= 120):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 1‚Äì120).")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET age = ? WHERE tg_id = ?", (int(t), message.from_user.id))
    conn.commit(); conn.close()
    await state.set_state(ProfileFullFSM.height)
    await message.answer("–†–æ—Å—Ç (—Å–º, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@router.message(ProfileFullFSM.height)
async def pf_height(message: Message, state: FSMContext):
    t = (message.text or "").strip()
    if not _is_int(t) or not (100 <= int(t) <= 250):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –≤ —Å–º (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 100‚Äì250).")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET height = ? WHERE tg_id = ?", (int(t), message.from_user.id))
    conn.commit(); conn.close()
    await state.set_state(ProfileFullFSM.weight)
    await message.answer("–í–µ—Å (–∫–≥, —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")

@router.message(ProfileFullFSM.weight)
async def pf_weight(message: Message, state: FSMContext):
    t = (message.text or "").strip()
    if not _is_int(t) or not (30 <= int(t) <= 400):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ 30‚Äì400).")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET weight = ? WHERE tg_id = ?", (int(t), message.from_user.id))
    conn.commit(); conn.close()
    await state.set_state(ProfileFullFSM.gender)
    await message.answer("–ü–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π):")

@router.message(ProfileFullFSM.gender)
async def pf_gender(message: Message, state: FSMContext):
    raw = (message.text or "").strip().lower()
    mapping = {
        "–º":"–º—É–∂—Å–∫–æ–π","–º—É–∂":"–º—É–∂—Å–∫–æ–π","–º—É–∂—á–∏–Ω–∞":"–º—É–∂—Å–∫–æ–π","–º—É–∂—Å–∫–æ–π":"–º—É–∂—Å–∫–æ–π",
        "–∂":"–∂–µ–Ω—Å–∫–∏–π","–∂–µ–Ω":"–∂–µ–Ω—Å–∫–∏–π","–∂–µ–Ω—â–∏–Ω–∞":"–∂–µ–Ω—Å–∫–∏–π","–∂–µ–Ω—Å–∫–∏–π":"–∂–µ–Ω—Å–∫–∏–π",
    }
    gender = mapping.get(raw, raw)
    if gender not in ("–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"):
        await message.answer("–ü–æ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: –º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑.")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET gender = ? WHERE tg_id = ?", (gender, message.from_user.id))
    conn.commit(); conn.close()
    await state.set_state(ProfileFullFSM.goal)
    await message.answer("–¶–µ–ª—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: —Å–∏–ª–∞ / –º–∞—Å—Å–∞ / —Å—É—à–∫–∞ / –æ–±—â–∞—è —Ñ–æ—Ä–º–∞ ‚Äî –≤–≤–µ–¥–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö:")

@router.message(ProfileFullFSM.goal)
async def pf_goal(message: Message, state: FSMContext):
    raw = (message.text or "").strip().lower()
    goal = "–æ–±—â–∞—è —Ñ–æ—Ä–º–∞" if raw in {"—Ñ–æ—Ä–º–∞", "–æ–±—â–∞—è —Ñ–æ—Ä–º–∞"} else raw
    if goal not in {"—Å–∏–ª–∞","–º–∞—Å—Å–∞","—Å—É—à–∫–∞","–æ–±—â–∞—è —Ñ–æ—Ä–º–∞"}:
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç—ã —Ü–µ–ª–∏: —Å–∏–ª–∞, –º–∞—Å—Å–∞, —Å—É—à–∫–∞, –æ–±—â–∞—è —Ñ–æ—Ä–º–∞. –í–≤–µ–¥–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö.")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET goal = ? WHERE tg_id = ?", (goal, message.from_user.id))
    conn.commit(); conn.close()
    await state.set_state(ProfileFullFSM.experience)
    await message.answer("–û–ø—ã—Ç: –Ω–æ–≤–∏—á–æ–∫ / —Å—Ä–µ–¥–Ω–∏–π / –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π")

@router.message(ProfileFullFSM.experience)
async def pf_experience(message: Message, state: FSMContext):
    raw = (message.text or "").strip().lower()
    if raw not in {"–Ω–æ–≤–∏—á–æ–∫","—Å—Ä–µ–¥–Ω–∏–π","–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"}:
        await message.answer("–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø—ã—Ç–∞: –Ω–æ–≤–∏—á–æ–∫ / —Å—Ä–µ–¥–Ω–∏–π / –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π. –í–≤–µ–¥–∏ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö.")
        return
    conn = get_connection(); cur = conn.cursor()
    cur.execute("UPDATE users SET experience = ? WHERE tg_id = ?", (raw, message.from_user.id))
    conn.commit(); conn.close()
    # –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–∏–ª–æ–≤–æ–π –∞–Ω–∫–µ—Ç–µ (–æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –ø–æ –±–∞–∑–æ–≤—ã–º –ª–∏—Ñ—Ç–∞–º)
    from states import OnboardFSM
    await state.set_state(OnboardFSM.bench)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –±–∞–∑–æ–≤—ã–µ –≤–≤–æ–¥–Ω—ã–µ –ø–æ —Å–∏–ª–µ.\n\n–ñ–∏–º –ª—ë–∂–∞ ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–µ—Å (–∫–≥)? –í–≤–µ–¥–∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")